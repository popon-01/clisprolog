(in-package :clisprolog)

(defmacro go-down-read (obj rest type)
  (with-gensyms (gtail grest)
    `(multiple-value-bind (,gtail ,grest)
         (reader ,rest ,type)
       (values (cons ,obj ,gtail) ,grest))))

(defun read-paren (tokens type)
  (multiple-value-bind (lst next)
      (reader (cdr tokens) :paren)
    (go-down-read (make-instance 'prolog-paren :value lst)
                  next type)))

(defun read-list (tokens type)
  (multiple-value-bind (lst next)
      (reader (cdr tokens) :bracket)
    (go-down-read (make-instance 'prolog-list :value lst)
                  next type)))

(defun read-comma (tokens type)
  (if (eq type :global)
      (go-down-read (make-instance 'prolog-op :name ",")
                    (cdr tokens) type)
      (reader (cdr tokens) type)))

(defun read-atom (tokens type)
  (let ((name (first (car tokens))))
    (if (or (null (cdr tokens))
            (not (eq (second (second tokens)) :lparen)))
        (go-down-read (make-instance 'prolog-atom :name name)
                      (cdr tokens) type)
        (multiple-value-bind (lst next)
            (reader (cddr tokens) :paren)
          (go-down-read (make-instance 'prolog-pred
                                       :name name
                                       :args lst)
                        next type)))))

(defun make-value (token)
  (let ((tok (first token))
        (tag (second token)))
    (case tag
      (:period (make-instance 'prolog-period))
      (:semicolon (make-instance 'prolog-op :name ";"))
      (:pipe (make-instance 'prolog-op :name "|"))
      (:number (make-instance 'prolog-num
                              :value (read-from-string tok)))
      (:variable (make-instance 'prolog-var :name tok))
      (:operator (make-instance 'prolog-op :name tok)))))

(defun reader (tokens type)
  (if (null tokens)
      (if (eq type :global)
          (values nil nil)
          (error "unclosed paren or blacket"))
      (case (second (car tokens))
        (:lparen (read-paren tokens type))
        (:lbracket (read-list tokens type))
        (:rparen (if (eq type :paren)
                     (values nil (cdr tokens))
                     (error "paren unmatch")))
        (:rbracket (if (eq type :bracket)
                       (values nil (cdr tokens))
                       (error "bracket unmatch")))
        (:comma (read-comma tokens type))
        (:atom (read-atom tokens type))
        (t (go-down-read (make-value (car tokens))
                         (cdr tokens) type)))))

(defun test-read (path)
  (mapc (lambda (val) (print (prolog-value-str val)))
        (reader (lexer path) :global)))
